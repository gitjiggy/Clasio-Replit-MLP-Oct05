Fix Critical restoreDocument Security Vulnerability

  IMMEDIATE SECURITY FIX REQUIRED

  There is a critical tenant isolation vulnerability in the restoreDocument method that must be fixed immediately. The method signature promises to validate user ownership but the implementation doesn't enforce it.

  PROBLEM IDENTIFIED:

  In the file server/storage.ts, there is a dangerous mismatch:

  - The interface at line 182 declares: restoreDocument(id: string, userId: string)
  - The actual implementation at line 3135 only accepts: restoreDocument(id: string)
  - The implementation at line 3143 queries without tenant validation: WHERE documents.id = ? AND documents.status = 'trashed'

  This allows any authenticated user to potentially restore documents belonging to other users by guessing document IDs.

  REQUIRED FIX:

  1. Fix the method signature in storage.ts around line 3135:
    - Change from: async restoreDocument(id: string): Promise<{ success: boolean; error?: string }>
    - Change to: async restoreDocument(id: string, userId: string): Promise<{ success: boolean; error?: string; alreadyLive?: boolean; message?: string }>
  2. Add tenant validation to the database query around line 3143:
    - Change from: WHERE documents.id = ? AND documents.status = 'trashed'
    - Change to: WHERE documents.id = ? AND documents.status = 'trashed' AND documents.userId = ?
  3. Use the userId parameter in the query:
    - The userId parameter should be passed to the WHERE clause to ensure only the document owner can restore their own documents
  4. Verify the fix by ensuring:
    - The method signature matches the interface exactly
    - All database operations in the method include userId validation
    - The method follows the same security pattern as other document operations like deleteDocument

  EXAMPLE OF THE CORRECT PATTERN:

  Look at the deleteDocument method around line 3056 for the correct security pattern:
  - It accepts both id and userId parameters
  - It validates ownership with getDocumentById(id, userId) before proceeding
  - All subsequent operations are scoped to the validated user

  Apply this same pattern to restoreDocument.

  VALIDATION STEPS:

  After making the fix:
  1. Confirm the method signature exactly matches the interface declaration
  2. Verify that attempting to restore a document with a different userId fails
  3. Test that users can only restore their own trashed documents
  4. Ensure the method returns appropriate error messages for unauthorized attempts

  CRITICAL IMPORTANCE:

  This is a HIGH SEVERITY security vulnerability that could allow cross-tenant data access. Fix this immediately before any other enhancements. The current implementation violates the principle of least privilege and could lead to
  unauthorized document restoration across tenant boundaries.

  The fix should take less than 5 minutes but is essential for maintaining data security and tenant isolation in the system.